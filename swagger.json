{
  "swagger": "2.0",
  "info": {
    "title": "Delivery API Documentation",
    "description": "API documentation for the delivery backend",
    "version": "1.0.0"
  },
  "host": "localhost:5555",
  "basePath": "/api/v1",
  "schemes": [
    "http"
  ],
  "paths": {
    "/category/create": {
      "post": {
        "tags": ["Category"],
        "summary": "Create a new category",
        "description": "Creates a new category in the system",
        "parameters": [
          {
            "name": "body",
            "in": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/Category"
            }
          }
        ],
        "responses": {
          "201": {
            "description": "Category created successfully"
          },
          "400": {
            "description": "Invalid input or category already exists"
          }
        }
      }
    },
    "/categories": {
      "get": {
        "tags": ["Category"],
        "summary": "Get all categories",
        "description": "Retrieves all categories from the system",
        "responses": {
          "200": {
            "description": "Categories retrieved successfully",
            "schema": {
              "type": "array",
              "items": {
                "$ref": "#/definitions/Category"
              }
            }
          },
          "404": {
            "description": "No categories found"
          },
          "500": {
            "description": "Failed to retrieve categories"
          }
        }
      }
    },
    "/category/": {
      "get": {
        "tags": ["Category"],
        "summary": "Get category by name",
        "description": "Retrieves a category by its name",
        "parameters": [
          {
            "name": "name",
            "in": "query",
            "required": true,
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "Category retrieved successfully",
            "schema": {
              "$ref": "#/definitions/Category"
            }
          },
          "400": {
            "description": "Invalid or missing parameter: name"
          },
          "404": {
            "description": "Category not found"
          }
        }
      }
    },
    "/category/{id}/product": {
      "get": {
        "tags": ["Category"],
        "summary": "Get products by category ID",
        "description": "Retrieves all products for a given category ID",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "required": true,
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "Products retrieved successfully for this category",
            "schema": {
              "type": "array",
              "items": {
                "$ref": "#/definitions/Product"
              }
            }
          },
          "404": {
            "description": "No products found for this category"
          },
          "500": {
            "description": "Failed to retrieve products by category"
          }
        }
      }
    },
    "/category/{id}/update": {
      "put": {
        "tags": ["Category"],
        "summary": "Update a category",
        "description": "Updates a category by its ID",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "required": true,
            "type": "string"
          },
          {
            "name": "body",
            "in": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/Category"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Category updated successfully",
            "schema": {
              "$ref": "#/definitions/Category"
            }
          },
          "400": {
            "description": "Invalid or missing parameters, or category name already exists"
          }
        }
      }
    },
    "/category/{id}/remove": {
      "delete": {
        "tags": ["Category"],
        "summary": "Delete a category",
        "description": "Deletes a category by its ID",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "required": true,
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "Category deleted successfully"
          },
          "400": {
            "description": "Invalid or missing parameter: id"
          }
        }
      }
    },
    "/product/create": {
      "post": {
        "tags": ["Product"],
        "summary": "Create a new product",
        "description": "Creates a new product in the system",
        "parameters": [
          {
            "name": "body",
            "in": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/Product"
            }
          }
        ],
        "responses": {
          "201": {
            "description": "Product created successfully"
          },
          "400": {
            "description": "Invalid input or product already exists"
          }
        }
      }
    },
    "/product/": {
      "get": {
        "tags": ["Product"],
        "summary": "Get product by name",
        "description": "Retrieves a product by its name",
        "parameters": [
          {
            "name": "name",
            "in": "query",
            "required": true,
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "Product retrieved successfully",
            "schema": {
              "$ref": "#/definitions/Product"
            }
          },
          "400": {
            "description": "Invalid or missing parameter: name"
          },
          "404": {
            "description": "Product not found"
          }
        }
      }
    },
    "/product/{id}": {
      "get": {
        "tags": ["Product"],
        "summary": "Get product by ID",
        "description": "Retrieves a product by its ID",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "required": true,
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "Product retrieved successfully",
            "schema": {
              "$ref": "#/definitions/Product"
            }
          },
          "404": {
            "description": "Product not found"
          }
        }
      },
      "put": {
        "tags": ["Product"],
        "summary": "Update a product",
        "description": "Updates a product by its ID",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "required": true,
            "type": "string"
          },
          {
            "name": "body",
            "in": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/Product"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Product updated successfully",
            "schema": {
              "$ref": "#/definitions/Product"
            }
          },
          "400": {
            "description": "Invalid or missing parameters"
          }
        }
      }
    },
    "/products": {
      "get": {
        "tags": ["Product"],
        "summary": "Get all products",
        "description": "Retrieves all products from the system",
        "responses": {
          "200": {
            "description": "Products retrieved successfully",
            "schema": {
              "type": "array",
              "items": {
                "$ref": "#/definitions/Product"
              }
            }
          },
          "404": {
            "description": "No products found"
          },
          "500": {
            "description": "Failed to retrieve products"
          }
        }
      }
    },
    "/product/{id}/category": {
      "put": {
        "tags": ["Product"],
        "summary": "Update product category",
        "description": "Updates the category of a product by its ID",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "required": true,
            "type": "string"
          },
          {
            "name": "body",
            "in": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/Product"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Product category updated successfully",
            "schema": {
              "$ref": "#/definitions/Product"
            }
          },
          "400": {
            "description": "Invalid or missing parameters"
          }
        }
      }
    },
    "/product/{id}/image": {
      "put": {
        "tags": ["Product"],
        "summary": "Update product image",
        "description": "Updates the image of a product by its ID",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "required": true,
            "type": "string"
          },
          {
            "name": "body",
            "in": "body",
            "required": true,
            "schema": {
              "type": "object",
              "properties": {
                "imageUrl": {
                  "type": "string"
                }
              },
              "required": ["imageUrl"]
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Product image updated successfully",
            "schema": {
              "$ref": "#/definitions/Product"
            }
          },
          "400": {
            "description": "Invalid or missing parameters"
          }
        }
      }
    },
    "/users/create/user": {
      "post": {
        "tags": ["User"],
        "summary": "Create a new user",
        "description": "Creates a new user in the system",
        "parameters": [
          {
            "username": "body",
            "in": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/User"
            }
          }
        ],
        "responses": {
          "201": {
            "description": "User created with success"
          },
          "400": {
            "description": "User already exists"
          }
        }
      }
    },
    "/users/login": {
      "post": {
        "tags": ["User"],
        "summary": "Login a user",
        "description": "Should do login in system",
        "parameters": [
          {
            "name":"body",
            "in": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/User/login"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "User logged in successfully"
          },
          "401": {
            "description": "Invalid credentials"
          }
        }
      }
    },
    "/users/": {
      "get": {
        "tags": ["User"],
        "summary": "Get all users",
        "description": "Get all users in the database",
        "responses": {
          "200": {
            "description": "User retrieved successfully"
          },
          "400": {
            "description": "Failed to retrieve users" 
          }
        }
      }
    },
    "/users/:id/user": {
      "get": {
        "tags": ["User"],
        "summary": "Get user By ID",
        "description": "Get user by id",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "required": true,
            "type": "string"
           
          }
        ],
        "responses": {
          "200": {
            "description": "User retrieved successfully",
            "schema": {
              "$ref": "#/definitions/User/byid"
            }
          },
          "400": {
            "description": "Failed to retrieve user" 
          }
        }
      }
    },
    "/users/update/:id/user": {
      "put": {
        "tags": ["User"],
        "summary":"Update user by id",
        "description": "Updates the user username, name and phone",
        "parameters": [
          {
            "name": "body",
            "in":"body",
            "required": true,
            "type": "string",
            "schema": {
              "$ref": "#/definitions/User/update"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "User updated successfully"
          },
          "400": {
            "description": "Error updating user"
          }
        }
      }
    },
    "/users/update-address": {
      "put": {
        "tags": ["User"],
        "summary": "Update user address",
        "description": "Updates the user's address",
        "parameters": [
          {
            "name": "body",
            "in": "body",
            "required": true,
            "type": "string",
            "schema": {
              "$ref": "#/definitions/User/address"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "User address updated successfully"
          },
          "400": {
            "description": "Invalid or missing parameters"
          }
        }
      }
    },
    "/users/:id/delete": {
      "delete": {
        "tags": ["User"],
        "summary": "Delete user by ID",
        "description": "Delete user by id",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "required": true,
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "User deleted successfully"
          },
          "400": {
            "description": "Failed to delete user"
          }
        }
      }
    },
    "/order/create": {
      "post": {
        "tags": ["Order"],
        "summary": "Create a new order",
        "description": "Creates a new order in the system",
        "parameters": [
          {
            "name": "body",
            "in": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/Order"
            }
          }
        ],
        "responses": {
          "201": {
            "description": "Order created with success"
          },
          "400": {
            "description": "Failed to create orders"
          }
        }
      }
    },
    "/order/user/list": {
      "get": {
        "tags": ["Order"],
        "summary": "Get order by user",
        "description": "Get all orders created by user",
        "responses": {
          "200": {
            "description": "Order retrieved successfully"
          },
          "400": {
            "description": "Failed to retrieve orders"
          },
          "404": {
            "description": "No orders found for this user"
          }
        }
      }
    },
    "/order/products/list": {
      "get": {
        "tags": ["Order"],
        "summary": "Get order by user",
        "description": "Get all orders created by user with products",
        "responses": {
          "200": {
            "description": "Orders retrieved successfully with products"
          },
          "400": {
            "description": "No orders found for this user"
          },
          "500": {
            "description": "Failed to get order"
          }
        }
      }
    },
    "/order/availables": {
      "get": {
        "tags": ["Order"],
        "summary": "Get order availables",
        "description": "Get all orders availables",
        "responses": {
          "200": {
            "description": "Orders retrieved successfully"
          },
          "400": {
            "description": "Failed to create orders"
          },
          "404": {
            "description": "No Order Available"
          }
        }
      }
    },
    "/order/unavailables": {
      "get": {
        "tags": ["Order"],
        "summary": "Get order unavailables",
        "description": "Get all orders unavailables",
        "responses": {
          "200": {
            "description": "Orders retrieved successfully"
          },
          "400": {
            "description": "Failed to get orders unavailable"
          },
          "404": {
            "description": "No Order Unavailable"
          }
        }
      }
    },
    "/order/completed": {
      "get": {
        "tags": ["Order"],
        "summary": "Get order completed",
        "description": "Get all orders completed",
        "responses": {
          "200": {
            "description": "Order completed successfully"
          },
          "400": {
            "description": "Failed to received orders completed"
          },
          "404": {
            "description": "No Order Completed"
          }
        }
      }
    },
    "/order/{id}": {
      "get": {
        "tags": ["Order"],
        "summary": "Get order by id",
        "description": "Get order by ID",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "required": true
          }
        ],
        "responses": {
          "200": {
            "description": "Order retrieved successfully"
          },
          "400": {
            "description": "Failed to get order"
          },
          "404": {
            "description": "Order not found"
          }
        }
      }
    },
    "/order/delivered/{id}": {
      "put": {
        "tags": ["Order"],
        "summary": "Mark order as delivered",
        "description": "Marks an order as delivered by its ID, the user deliveryMan should are do logged in appplication",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "required": true,
            "type": "string",
            "schema": {
              "$ref": "#/definitions/Order/delivered"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Order delivered successfully"
          },
          "400": {
            "description": "Failed to update order, verify available order"
          },
          "401": {
            "description": "DeliveryMan ID not found in request"
          }
        }
      }
    },
    "/deliveryman/create": {
      "post": {
        "tags": ["DeliveryMan"],
        "summary": "Create a new delivery man",
        "description": "Creates a new delivery man in the system",
        "parameters": [
          {
            "name": "body",
            "in": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/DeliveryMan"
            }
          }
        ],
        "responses": {
          "201": {
            "description": "Delivery man created with success"
          },
          "400": {
            "description": "User already exists with this email"
          }
        }
      }
    },
    "/deliveryman/login/user": {
      "post": {
        "tags": ["DeliveryMan"],
        "summary": "User login",
        "description": "User login for delivery man",
        "parameters": [
          {
            "name": "body",
            "in": "body",
            "required": true,
            "type": "object",
            "schema": {
              "$ref": "#/definitions/Delivery-user-login"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "User logged in successfully"
          },
          "400": {
            "description": "Invalid email or password"
          }
        }
      }
    },
    "/deliveryman/update/{id}/user": {
      "put": {
        "tags": ["DeliveryMan"],
        "summary": "Update delivery man",
        "description": "Update delivery person data - (Auth Token required)",
        "parameters": [
          {
            "name": "body",
            "in": "body",
            "required": true,
            "type": "object",
            "schema": {
              "$ref": "#/definitions/Delivery-update-user"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "DeliveryMan updated successfully"
          },
          "400": {
            "description": "Invalid or missing parameters: id, name, phones"
          }
        }
      }
    },
    "/deliveryman/order-accept/{id}": {
      "put": {
        "tags": ["DeliveryMan"],
        "summary": "Accept order",
        "description": "Update order with delivery man id - (Auth Token required)",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "required": true,
            "schema": {
              "$ref": "#/definitions/Delivery-order-accept"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "DeliveryMan accepted with successfully"
          },
          "400": {
            "description": "Error updating order delivery man"
          },
          "401": {
            "description": "User ID not specified in request"
          }
        }
      }
    },
    "/deliveryman/orders": {
      "get": {
        "tags": ["DeliveryMan"],
        "summary": "Get orders by Delivery man",
        "description": "Get all orders created by deliveryman - (Auth Token required)",
        "responses": {
          "200": {
            "description": "Orders retrieved successfully"
          },
          "400": {
            "description": "Failed to get order"
          },
          "401": {
            "description": "DeliveryManId not specified in request"
          }
        }
      }
    }
  },
  "definitions": {
      "Category": {
        "type": "object",
        "properties": {
          "id": {
            "type": "string"
          },
          "name": {
            "type": "string"
          },
          "description": {
            "type": "string"
          }
        },
        "required": ["name"]
      },
      "Product": {
        "type": "object",
        "properties": {
          "id": {
            "type": "string"
          },
          "name": {
            "type": "string"
          },
          "description": {
            "type": "string"
          },
          "price": {
            "type": "number",
            "format": "float"
          },
          "categoryId": {
            "type": "string"
          },
          "imageUrl": {
            "type": "string"
          }
        },
        "required": ["name", "price", "categoryId"]
      },
      "User": {
        "type": "object",
        "properties": {
          "username": {
            "type": "string"
          },
          "name": {
            "type": "string"
          },
          "email": {
            "type": "string",
            "format": "email"
          },
          "phone": {
            "type": "string"
          },
          "password": {
            "type": "string"
          },
          "address": {
            "type": "object",
            "properties": {
              "street": {
                "type": "string"
              },
              "number": {
                "type": "string"
              },
              "city": {
                "type": "string"
              },
              "country": {
                "type": "string"
              },
              "zipCode": {
                "type": "string"
              }
            }
          }
        }, "login": {
          "properties": {
            "email": {
              "type": "string",
              "format": "email"
            },
            "password": {
              "type": "string"
            }
          }
        }, "address": {
          "type": "object",
          "properties": {
            "email": {
              "type": "string",
              "format": "email"
              },
              "address": {
                "properties": {
                "street": {
                "type": "string"
                },
                "number": {
                  "type": "string"
                },
                "city": {
                  "type": "string"
                },
                "country": {
                  "type": "string"
                },
                "zipCode": {
                  "type": "string"
                }
              },
              "required": ["street", "number", "city", "country", "zipCode"]
            }
          },
          "required": ["email"] 
        },
        "update": {
          "properties": {
            "username": {
              "type": "string"
            },
            "name": {
              "type": "string"
            },
            "phone": {
              "type": "string"
            }
          },
          "required": ["username", "name", "phone"]
        },
        "byid": {
          "type": "object",
          "properties": {
            "id": {
              "type": "string"
            },
            "name": {
              "type": "string"
            },
            "username": {
              "type": "string"
            },
            "email": {
              "type": "string",
              "format": "email"
            },
            "phone": {
              "type": "string"
            },
            "role": {
              "type": "string"
            },
            "address": {
              "type": "object",
              "properties": {
                "street": {
                  "type": "string"
                },
                "number": {
                  "type": "string"
                },
                "city": {
                  "type": "string"
                },
                "country": {
                  "type": "string"
                },
                "zipCode": {
                  "type": "string"
                }
              }
            }
          }
        }
      },
      "Order": {
        "type": "object",
        "properties": {
          "products": {
            "type": "object",
            "properties": {
              "productId": {
                "type": "string"
              },
              "quantity": {
                "type": "number"
              } 
            }, 
            "required": ["productId", "quantity"]
          },
          "totalAmount": {
            "type": "number"
          },
          "discount": {
            "type": "number"
          },
          "status": {
            "type": "string"
          }
        },
        "required": ["totalAmount", "discount", "status"]
      },
      "Order/delivered": {
        "type": "object",
        "properties": {
          "deliveryManId": {
            "type": "string"
          },
          "authorization": {
            "type": "string"
          }
        },
        "required": ["deliveryManId"]
      },
      "DeliveryMan": {
        "type": "object",
        "properties": {
          "name": {
            "type": "string"
          },
          "email": {
            "type": "string",
            "format": "email"
          },
          "username": {
            "type": "string"
          },
          "password": {
            "type": "string"
          },
          "phone": {
            "type": "string"
          }
          },
          "required": ["name", "email", "username", "password", "phone"]
      },
      "Delivery-user-login": {
        "type": "object",
        "properties": {
          "email": {
            "type": "string",
            "format": "email"
          },
          "password": {
            "type": "string"
          }
        },
        "required": ["email", "password"]
      },
      "Delivery-update-user": {
        "type": "object",
        "properties": {
          "name": {
            "type": "string"
          },
          "phone": {
            "type": "string"
          }
        },
        "required": ["name", "phone"]
      },
      "Delivery-order-accept": {
        "type": "object",
        "properties": {
          "deliveryManId": {
            "type": "string"
          }
        },
        "required": ["deliveryManId"]
      }
    }
  }
